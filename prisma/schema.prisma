generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    phone         String?
    accounts      Account[]
    sessions      Session[]

    cart           Cart?
    orders         Order[]
    productReviews ProductReview[]
    notifications  Notification[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Payment   Payment[]
    Address   Address[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id         String @id @default(cuid())
    country    String @default("IRI")
    address    String
    city       String
    phone      String
    postalCode String

    user   User    @relation(fields: [userId], references: [id])
    userId String
    orders Order[]

    createdAt DateTime @default(now())

    @@index([userId])
}

model Cart {
    user   User       @relation(fields: [userId], references: [id])
    userId String     @id
    items  CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    cart      Cart    @relation(fields: [cartId], references: [userId])
    cartId    String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    count     Int

    @@unique([cartId, productId], name: "UniqueCartItem")
}

model Product {
    id          String   @id @default(cuid())
    title       String
    description String?
    images      String[]
    keywords    String[]
    metadata    Json?

    price    Float @default(100)
    discount Float @default(0)
    stock    Int   @default(0)

    isPhysical  Boolean @default(true)
    isAvailable Boolean @default(false)
    isFeatured  Boolean @default(false)

    orders         OrderItem[]
    cartItems      CartItem[]
    productReviews ProductReview[]

    categories Category[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id          String  @id @default(cuid())
    title       String  @unique
    description String?

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductReview {
    id     String @id @default(cuid())
    text   String
    rating Int

    product   Product @relation(fields: [productId], references: [id])
    productId String
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productId, userId], name: "UniqueProductProductReview")
    @@index([userId])
    @@index([productId])
}

model Order {
    id     String          @id @default(cuid())
    number Int             @unique @default(autoincrement())
    status OrderStatusEnum

    total    Float @default(100)
    shipping Float @default(100)
    payable  Float @default(100)
    tax      Float @default(100)
    discount Float @default(0)

    isPaid      Boolean @default(false)
    isCompleted Boolean @default(false)

    orderItems OrderItem[]

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Payment   Payment[]
    Address   Address?  @relation(fields: [addressId], references: [id])
    addressId String?

    @@index([userId])
}

model OrderItem {
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    count     Int
    price     Float
    discount  Float

    @@unique([orderId, productId], name: "UniqueOrderItem")
}

enum OrderStatusEnum {
    Processing
    Shipped
    Delivered
    Cancelled
}

model Notification {
    id      String  @id @default(cuid())
    content String
    isRead  Boolean @default(false)

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Payment {
    id     String            @id @default(cuid())
    number Int               @unique @default(autoincrement())
    status PaymentStatusEnum

    refId    String  @unique
    cardPan  String?
    cardHash String?
    fee      Float?

    isSuccessful Boolean @default(false)
    payable      Float

    provider   PaymentProvider @relation(fields: [providerId], references: [id])
    providerId String
    user       User            @relation(fields: [userId], references: [id])
    userId     String
    order      Order           @relation(fields: [orderId], references: [id])
    orderId    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([providerId])
    @@index([orderId])
}

enum PaymentStatusEnum {
    Processing
    Paid
    Failed
    Denied
}

model PaymentProvider {
    id          String  @id @default(cuid())
    title       String  @unique
    description String?
    websiteUrl  String?
    isActive    Boolean @default(false)

    orders Payment[]
}
